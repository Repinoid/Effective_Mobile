services:
  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   container_name: pgadmin
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: a@e.com
  #     PGADMIN_DEFAULT_PASSWORD: admpass
  #   volumes:
  #     - pgadmin_data:/var/lib/pgadmin
  #   ports:
  #     - "8088:80"
  #   depends_on:
  #     - db
  #   networks:
  #     - localnet

  db:
    image: postgres:17
    container_name: dbcont
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - localnet
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  app:
    image: goy
    container_name: sapp
    # build:
    #   # путь до докерфайла
    #   context: ./
    #   # докерфайл
    #   dockerfile: ServerDockerFile
    ports:
      - "8080:8080"
    environment:
      MIGRATIONS_PATH: "file://migrations"
      BASE_HOST:    db
      DB_HOST:      ${DB_HOST}
      DB_PORT:      5432
      DB_USER:      ${DB_USER}
      DB_PASSWORD:  ${DB_PASSWORD}
      DB_NAME:      ${DB_NAME}
      APP_HOST:     ${APP_HOST}       # "0.0.0.0" # Сервер будет слушать все интерфейсы
      LOG_LEVEL:    debug             # Уровень логирования 
      LOG_FORMAT:   json  # Ваш логгер уже использует slog.JSONHandler
      LOG_OUTPUT:   stdout # Все логи в stdout

    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - localnet

  alloy:
    build:
      context: .
      dockerfile: Dockerfile.alloy  # используем кастомный Dockerfile с CURL
    container_name: alloy
    user: "0:0"  # Run as root (UID 0, GID 0)
    volumes:
      - ./alloy/config.alloy:/etc/alloy/config.alloy
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - loki-data:/loki
      - ./alloy/log:/var/log/myapp
    # command: [ "run", "/etc/alloy/config.alloy" ]
    command: ["run", "--server.http.listen-addr=0.0.0.0:12345", "/etc/alloy/config.alloy"]
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - localnet


  grafana:
    image: grafana/grafana:latest
    container_name: graf
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_NAME: Main Org.
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      # GF_SECURITY_ADMIN_USER: admin
      # GF_SECURITY_ADMIN_PASSWORD: admin
    depends_on:
      - loki
      # - prometheus      
    networks:
      - localnet

  loki:
    image: grafana/loki:latest
    # image: grafana/loki:2.8.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./local-config.yaml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: [ "-config.file=/etc/loki/local-config.yaml", "-config.expand-env=true" ]
    # command: ["-config.file=/etc/loki/local-config.yaml"]
    networks:
      - localnet

volumes:
  postgres_data:
  pgadmin_data: 
  grafana-storage:
  loki-data:
  # prometheus_data:  


networks:
  localnet:
    driver: bridge
    name: isem

# docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions

# mkdir -p loki-data/{chunks,rules,boltdb-shipper-active,boltdb-shipper-cache}

# docker container rm -f graf grafana loki 2>/dev/null || true && docker compose up -d

# docker buildx build -f ServerDockerFile -t goy .

# curl -G "http://localhost:3100/loki/api/v1/series" --data-urlencode 'match[]={job="myapp"}'

# curl -G "http://localhost:3100/loki/api/v1/query" --data-urlencode 'query={job="myapp"}' | jq

# docker inspect graf | grep -i cmd -A 125

# docker run --name log-test -d busybox sh -c 'while true; do echo "Test log $(date)"; sleep 5; done'